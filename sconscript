
Import('env')

env.Append(CPPPATH = ['include']) 

if env['compile_program'] != '':
	env.src_files.append(env.Object('src/programs/'+env['compile_program']+'.cpp'))

elif env['unit_test'] != '':
	env.src_files.append(env.Object('src/unit_tests/'+env['unit_test']+'.cpp'))

#
# WARNING!
# This rexi parallel sum part has to be done here since it relies on the entire environment
# WARNING!
#
if env['program_name'] in ['swe_rexi', 'pfasst_swe_plane_rexi'] or env['unit_test'] in ['test_helmholtz']:
	if env['rexi_parallel_sum']=='enable':
		env_omp = env.Clone()
#		env_omp.Append(CCFLAGS = ' -fopenmp')
		env_omp.Append(CXXFLAGS = ' -fopenmp')
		env.src_files.append(env_omp.Object('src/programs/swe_plane_rexi/SWE_Plane_REXI.cpp'))
	else:
		env.src_files.append(env.Object('src/programs/swe_plane_rexi/SWE_Plane_REXI.cpp'))


if env['program_name'] in ['swe_sph_and_rexi'] or env['unit_test'] in ['test_sph_rexi_solver']:
	if env['rexi_parallel_sum']=='enable':
		env_omp = env.Clone()
#		env_omp.Append(CCFLAGS = ' -fopenmp')
		env_omp.Append(CXXFLAGS = ' -fopenmp')
		env.src_files.append(env_omp.Object('src/programs/swe_sphere_rexi/SWE_Sphere_REXI.cpp'))
	else:
		env.src_files.append(env.Object('src/programs/swe_sphere_rexi/SWE_Sphere_REXI.cpp'))


Export('env')

