import os
import sys
import glob

Import('env', 'p')
env.Append(CPPPATH = ['include'])


sweet_root = env['SWEET_ROOT']+'/'


mainsrcadddir = ''

if p.program != '':
	mainsrcadddir = 'src/programs/'+p.program
elif p.unit_test != '':
	mainsrcadddir = 'src/unit_tests/'+p.unit_test
else:
	mainsrcadddir = ''

if mainsrcadddir != '':


	#
	# Add an action to move any module files
	#
	def moveModFiles(target=None, source=None, env=None):
	    import glob, os, os.path
	    targetdir = target[0].dir
	    for t in target:
		if t.name[-4:] == '.mod':
		    os.rename(t.name,os.path.join(str(targetdir),t.name))


	#
	# Add main source file
	#
	env.src_files.append(env.Object(mainsrcadddir+'.cpp'))


	real_foodir = sweet_root+mainsrcadddir

	#
	# Check for program specific source code files in
	#    src/programs/[compile_program]
	#
	if os.path.isdir(real_foodir):

		cpp_files = glob.glob(real_foodir+'/*.cpp')
		for i in cpp_files:
			filerelpath = i.replace(sweet_root, '')

			# SWE REXI SPECIAL FILE HANDLING for threaded parallelization over the REXI sum
			filetmp = os.path.basename(filerelpath)
			if 'l_rexi' in filetmp or 'lg_rexi' in filetmp or 'lf_rexi' in filetmp:
				if p.rexi_thread_parallel_sum=='enable':
					env_omp = env.Clone()
					env_omp.Append(CXXFLAGS = ' -fopenmp')
					env_omp.src_files.append(env_omp.Object(filerelpath))
				else:
					env.src_files.append(env.Object(filerelpath))
			else:
				env.src_files.append(env.Object(filerelpath))

		fortran_files = glob.glob(real_foodir+'/*.f90')
		for i in fortran_files:
			filerelpath = i.replace(sweet_root, '')

			obj = env.Object(filerelpath)
			env.src_files.append(obj)
			#env.AddPostAction(obj, moveModFiles)


Export('env', 'p')

