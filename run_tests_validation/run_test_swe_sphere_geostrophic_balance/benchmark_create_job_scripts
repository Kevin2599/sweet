#! /usr/bin/env python3

import os
import sys
import stat
import math

from itertools import product

from SWEET import *
p = SWEETJobGeneration()

#
# Skip using 'mpiexec'
#
#p.parallelization.mpiexec_disabled = True


#
# Run simulation on plane or sphere
#
p.compile.program = 'swe_sphere'

p.compile.mode = 'debug'
p.compile.sweet_mpi = 'enable'

p.compile.plane_spectral_space = 'disable'
p.compile.plane_spectral_dealiasing = 'disable'
p.compile.sphere_spectral_space = 'enable'
p.compile.sphere_spectral_dealiasing = 'enable'

p.unique_id_filter = ['simparams', 'parallelization', 'benchmark', 'rexi_params']


# Enable quad math per default for CI REXI method
p.compile.quadmath = 'enable'


# Verbosity mode

#
# Mode and Physical resolution
#
p.runtime.mode_res = 128
p.runtime.mode_res = 64
p.runtime.phys_res = -1


# no instability checks to get some error output (e.g. NAN)
p.runtime.instability_checks = 0


#
# Benchmark ID
# 4: Gaussian breaking dam
#
p.runtime.benchmark_name = 'geostrophic_balance'

#
# Compute error
#
p.runtime.compute_error = 1

#
# Preallocate the REXI matrices
#
p.runtime.rexi_sphere_preallocation = 1


params_compile_threading = ['omp', 'off']
params_ext_modes = [0, 4]
params_compile_thread_parallel_sum = ['enable', 'disable']

#
# REXI method
# N=64, SX,SY=50 and MU=0 with circle primitive provide good results
#
p.runtime.rexi_method = 'ci'
p.runtime.rexi_ci_n = 128
p.runtime.rexi_ci_max_real = 10
p.runtime.rexi_ci_max_imag = 20

# These values should be also fine
p.runtime.rexi_ci_n = 16
p.runtime.rexi_ci_max_real = 1
p.runtime.rexi_ci_max_imag = 1
p.runtime.rexi_ci_mu = 0
p.runtime.rexi_ci_primitive = 'circle'




#p.runtime.g = 1
#p.runtime.f = 1
#p.runtime.h = 1
#p.runtime.domain_size = 1

p.runtime.viscosity = 0.0

p.runtime.verbosity = 10

# timestepsize: 60 seconds
timestep_sizes = [30]

# run 100 time steps
#p.runtime.simtime = 200*30
#p.runtime.simtime = 100*30
p.runtime.simtime = 10*30

# output results after end
p.runtime.output_timestep_size = p.runtime.simtime

p.runtime.output_filename = "-"

# Load SHTNS plans
p.user_script_exec_prefix = """
# Reutilize SHTNS plans if they exist
if [ -e ../shtns_cfg ]; then
	cp ../shtns_cfg ./ || exit 1
	cp ../shtns_cfg_fftw ./ || exit 1
#else
#	echo "WARNING: SHTNS plans not found, see README for information on how to generate them"
fi
"""

p.user_script_exec_suffix = """

cp shtns_cfg ../
cp shtns_cfg_fftw ../

"""


ts_methods = [
	['ln_erk',		4,	4,	0],	# reference solution

	['ln_erk',		2,	2,	0],

	['l_erk_n_erk',		2,	2,	0],

	['l_irk_n_erk_ver0',		2,	2,	0],
	['l_irk_n_erk_ver1',		2,	2,	0],

	['l_rexi_n_erk_ver0',	2,	2,	0],
	['l_rexi_n_erk_ver1',	2,	2,	0],

	['l_rexi_n_etdrk',	2,	2,	0],
	['lg_rexi_lc_n_etdrk',	2,	2,	0],
]


if False:
	#params_compile_threading = ['off']
	#params_ext_modes = [0]
	#params_compile_thread_parallel_sum = ['enable']
	p.runtime.mode_res = 16
	p.runtime.simtime = 2*30

	if False:
		ts_methods = [
			['ln_erk',		4,	4,	0],	# reference solution
	#		['l_erk_n_erk',		2,	2,	0],
	#		['l_irk_n_erk',		2,	2,	0],
	#		['ln_erk',		2,	2,	0],
			['l_rexi_n_erk_ver1',	2,	2,	0],
	#		['l_rexi_n_etdrk',	2,	2,	0],
	#		['lg_rexi_lc_n_etdrk',	2,	2,	0],
		]


#
# allow including this file
#
if __name__ == "__main__":



	#
	# Create job scripts
	#
	for tsm in ts_methods[1:]:

		p.runtime.timestepping_method = tsm[0]
		p.runtime.timestepping_order = tsm[1]
		p.runtime.timestepping_order2 = tsm[2]
		p.runtime.rexi_use_direct_solution = tsm[3]

		if len(tsm) > 4:
			s = tsm[4]
			p.runtime.load_from_dict(tsm[4])

		for p.runtime.timestep_size in timestep_sizes:

			for p.compile.threading, p.compile.rexi_thread_parallel_sum, p.runtime.rexi_extended_modes in product(params_compile_threading, params_compile_thread_parallel_sum, params_ext_modes):
				if 'rexi_' in p.runtime.timestepping_method:
					p.gen_jobscript_directory('job_bench_'+p.getUniqueID())

				else:
					if p.compile.rexi_thread_parallel_sum == 'enable':
						continue

					if p.runtime.rexi_extended_modes != 0:
						continue

					p.gen_jobscript_directory('job_bench_'+p.getUniqueID())
