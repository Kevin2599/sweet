#
# Script for Travis CI
#
# See doc/travis_ci.txt for more information
#

language: cpp

dist: trusty

#
# We want to setup the 3rd party libraries and test SWEET
# with different software consellations
#
# This is called a build matrix and generates different build
# environments
#
matrix:
  include:

    # Test with G++-5
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-5
            - gfortran-5
      env:
        - MATRIX_EVAL="export CC=gcc-5 && export CXX=g++-5 && export FC=gfortran-5 && export F90=gfortran-5"

    # Test with G++-6
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-6
            - gfortran-6
      env:
        - MATRIX_EVAL="export CC=gcc-6 && export CXX=g++-6 && export FC=gfortran-6 && export F90=gfortran-6"

    # Test with G++-7
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-7
            - gfortran-7
      env:
        - MATRIX_EVAL="export CC=gcc-7 && export CXX=g++-7 && export FC=gfortran-7 && export F90=gfortran-7"

    # Test with G++-8
    - os: linux
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - g++-8
            - gfortran-8
      env:
        - MATRIX_EVAL="export CC=gcc-8 && export CXX=g++-8 && export FC=gfortran-8 && export F90=gfortran-8"



# lapack: Not possible yet to build with with clang (no Fortran...)
#    # Test with clang
#    - os: linux
#      addons:
#        apt:
#          sources:
#            - ubuntu-toolchain-r-test
#          packages:
#            - clang
##            - gfortran-8
#      env:
#        - MATRIX_EVAL="export CC=clang && export CXX=clang++"
#        #- MATRIX_EVAL="export CC=clang-7 && export CXX=clang++7 && export FC=gfortran-8 && export F90=gfortran-8"


#
# 3rd party libraries which should be downloaded from the ubuntu repository
#
addons:
  apt:
    sources:
      - ubuntu-toolchain-r-test
    packages:
     - libopenmpi-dev
      - numactl
      - cmake


#
# Install dependencies
#
# See https://docs.travis-ci.com/user/installing-dependencies/
#
before_install:
  # Load matrix environment
  - echo "${MATRIX_EVAL}"
  - eval "${MATRIX_EVAL}"

  # Debug output
  - hostname

  # Load SEET environment variables
  - cd local_software || exit 1
  - source env_vars.sh || exit 1

  # Setup additional SWEET software packages
  - ./setup_local_software.sh || exit 1

  # Go back to SWEET's root directory
  - cd $SWEET_ROOT



#
# SWEET requires binaries compiled individually for each test
# Skip installation phase (install: true)
#
install: true



#
# Cache installed software
#
# After restoring the cache, the install scripts check for found
# software and avoid recompiling and installing it.
#
# See https://docs.travis-ci.com/user/caching/
#
# The cache is setup amongst others based on the environment variables
cache:
  directories:
    # Cache the install directory for SWEET's 3rd party software
    local_software/local


jobs:
  include:
# The following block is autogenerated with ./travis_setup_tests.py
###SCRIPT_START###
    script: ./tests/10_compile_test_parareal_ode/test.sh || exit 1
    script: ./tests/10_compile_test_spectral_visualization/test.sh || exit 1
    script: ./tests/10_compile_test_swe_plane/test.sh || exit 1
    script: ./tests/10_compile_test_burgers/test.sh || exit 1
    script: ./tests/10_compile_test_burgers.sh/test.sh || exit 1
    script: ./tests/10_compile_test_advection/test.sh || exit 1
    script: ./tests/10_compile_test_swe_plane_staggered_vector_invariant/test.sh || exit 1
    script: ./tests/10_compile_test_swe_plane_nonstaggered_vector_invariant/test.sh || exit 1
    script: ./tests/10_compile_test_swe_sphere/test.sh || exit 1
    script: ./tests/10_compile_test_lagrangian_plane_test/test.sh || exit 1
    script: ./tests/10_compile_test_sphere_output_spherical_harmonics/test.sh || exit 1
    script: ./tests/50_planedata_antialiasing_frequencies/test.py || exit 1
    script: ./tests/50_prog_swe_sphere_geostrophic_balance/test.py || exit 1
    script: ./tests/50_planedata_antialiasing_patterns/test.py || exit 1
###SCRIPT_END###
