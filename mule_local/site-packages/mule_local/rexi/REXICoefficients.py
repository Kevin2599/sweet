#! /usr/bin/env python3

from mule_local.rexi.EFloat import *
import math


class REXICoefficients:

	def __init__(self):

		self.efloat = None

		self.function_name = None

		self.alphas = []
		self.betas = []
		self.gamma = None

		return



	def toFloat(self):
		c = REXICoefficients()

		c.efloat = EFloat("float")
		c.function_name = self.function_name

		if self.efloat != None:
			if self.efloat.abs(self.efloat.im(self.gamma)) > 1e-10:
				raise Exception("Imaginary value "+str(self.efloat.im(self.gamma))+" should be close to zero")

			c.gamma = float(self.efloat.re(self.gamma))
		else:
			c.gamma = float(self.gamma.real)

		c.alphas = [complex(a) for a in self.alphas]
		c.betas = [complex(b) for b in self.betas]
		return c



	def write(self, filename):
		f = open(filename, "w")

		f.write("# N "+str(len(self.alphas))+"\n")

		f.write("# function_name "+str(self.function_name)+"\n")
		if self.gamma != None:
			f.write("# gamma\n")
			f.write(self.efloat.floatToStr(self.gamma)+"\n")

		f.write("# alphas\n")
		for a in self.alphas:
			f.write(self.efloat.floatToStr(self.efloat.re(a))+"\t")
			f.write(self.efloat.floatToStr(self.efloat.im(a))+"\n")

		f.write("# betas\n")
		for b in self.betas:
			f.write(self.efloat.floatToStr(self.efloat.re(b))+"\t")
			f.write(self.efloat.floatToStr(self.efloat.im(b))+"\n")



	def normalize_steady_state(self):
		"""
		Normalize for very accurate steady state modes (Eigenvalue 0)
		"""
		val = 0.0
		for i in range(len(self.alphas)):
			val = val + self.betas[i]/self.alphas[i]

		norm = 1.0/val
		for i in range(len(self.alphas)):
			self.betas[i] *= norm



	def eval(self, x):
		retval = self.gamma

		for i in range(len(self.alphas)):
			retval += self.betas[i] / (x + self.alphas[i])

		return retval


if __name__ == "__main__":

	r = REXICoefficients()
	r.efloat = EFloat()
	r.gamma = 1e-12
	r.alphas.append(1j+2.0)
	r.betas.append(3j+4.0)

	r.write("/tmp/test.txt")

	r2 = r.toFloat()
