#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Notes on iterative solvers for REXI
\end_layout

\begin_layout Author
Martin Schreiber <M.Schreiber@exeter.ac.uk>
\end_layout

\begin_layout Standard
The REXI approach allows a massive parallel evaluation of a linear operator
 to compute the solution at an arbitrary point in time in the future.
 However, one of the drawbacks of this approach is finding an efficient
 solver for the system 
\begin_inset Formula $(L-\alpha)^{-1}$
\end_inset

 which has to be solved.
 This document discusses some discoveries on the way to find such an efficient
 solver.
\end_layout

\begin_layout Section
Problem formulation
\end_layout

\begin_layout Standard
We can reformulate the 
\begin_inset Formula $(L-\alpha)^{-1}$
\end_inset

 problem to the following form:
\begin_inset Formula 
\[
(\kappa-a\nabla^{2})\vec{x}=\vec{b}
\]

\end_inset

Here, it is important to note, that 
\begin_inset Formula $\vec{x}$
\end_inset

 and 
\begin_inset Formula $\vec{b}$
\end_inset

 are both complex valued, 
\begin_inset Formula $a\nabla\text{²}$
\end_inset

 is a real-valued operator and 
\begin_inset Formula $\kappa$
\end_inset

 is a complex-valued number with both real and imaginary components.
 In a simplified test environment, we can directly use a spectral solver.
 However, this is not feasible for spatially varying 
\begin_inset Formula $a\nabla\text{²}$
\end_inset

 operator.
 In this work, we are searching for an efficient solver of this problem.
 We continue to write this problem as
\begin_inset Formula 
\[
A\vec{x}=\vec{b}
\]

\end_inset

and the residual as
\begin_inset Formula 
\[
\vec{r}:=A\vec{x}-\vec{b}
\]

\end_inset


\end_layout

\begin_layout Section
Testbed
\end_layout

\begin_layout Standard
To test solvers, we use the following conditions for the rhs given by
\begin_inset Formula 
\begin{eqnarray*}
Re(b(x,y)) & := & 10\,sin(4\pi x)\,cos(12\pi y)-4\,cos(8\pi y)\\
Im(b(x,y)) & := & 20\,cos(8\pi x)\,cos(4\pi y)+2\,sin(8\pi y)
\end{eqnarray*}

\end_inset

The solvers are executed with 
\begin_inset Formula $\vec{x}_{i}:=0$
\end_inset

.
 The studies are done on a resolution of 
\begin_inset Formula $64\text{²}$
\end_inset

.
\end_layout

\begin_layout Section
SOR Jacobi solver
\end_layout

\begin_layout Standard
We first test a direct SOR Jacobi solver directly operating on the complex
 values.
 Hence, we use the same strategy as for real-valued numbers.
\end_layout

\begin_layout Standard
Doing so, we are confronted with the following convergence behavior for
 the RMS error given for the 
\begin_inset Formula $n$
\end_inset

-th iteration:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\kappa=-27.4151200103+i\,9.32109446349
\]

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
RMS(\vec{r}): & = & (\\
 &  & 11.3061575423,\\
 &  & 11.003741976,\\
 &  & 10.7112623482,\\
 &  & 10.4282997955,\\
 &  & 10.1544564332,\\
 &  & 9.88935425942,\\
 &  & ...)
\end{eqnarray*}

\end_inset

We can observe a very slow convergence rate.
 Using an SOR lead to a divergent behavior.
\end_layout

\begin_layout Section
Multigrid solver
\end_layout

\begin_layout Standard
A slow convergence behavior is typically the case for low eigenmodes which
 cannot be eliminated with localized stencil computations.
 Indeed, the Jacobi solver is only able to smooth errors with a frequency
 close to the grid resolution.
\end_layout

\begin_layout Standard
A multigrid solver has the capability to improve this behavior by eliminating
 the low eigenmodes on a coarser resolution.
\end_layout

\begin_layout Standard
We tested the implementation with a V-cycle and 5 presmoothing steps.
 For the restriction/prolongation, we use a 
\begin_inset Formula $1\text{²}$
\end_inset

 to 
\begin_inset Formula $2^{2}$
\end_inset

 interpolation method and discuss the solver behavior in all steps:
\end_layout

\begin_layout Subsection
Restriction: Smoother on highest resolution
\end_layout

\begin_layout Standard
For the highest resolution, the RMS on the residual is given above.
 We can observe a very slow convergence - as it is typically the case.
\end_layout

\begin_layout Subsection
Restriction: Smoother after two restrictions
\end_layout

\begin_layout Standard
After doing two restrict operations, the convergence rate is significantly
 improved to
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
RMS(\vec{r}): & = & (\\
 &  & 4.12548811872,\\
 &  & 2.81791740595,\\
 &  & 1.94325286628,\\
 &  & 1.34953622779,\\
 &  & 0.942690091243\\
 &  & ).
\end{eqnarray*}

\end_inset

We can account for that by having a look at the frequencies in the RHS which
 are now close to the resolution of the grid.
 Hence, the errors can be damped very fast on this resolution.
\end_layout

\begin_layout Subsection
Prolongation
\end_layout

\begin_layout Standard
We can see a faster convergence on coarser resolution levels.
 However, after prolongating the solution up to the next level with higher
 resolution, we observe an RMS higher than in the restriction phase.
 Therefore, we investigate this a little bit further.
\end_layout

\begin_layout Standard
On the highest resolution level, we observe an initial RMS on the residual
 of 
\begin_inset Formula $26.6214562097$
\end_inset

 which clearly exceeded the original RMS during the restriction phase.
 One natural question which arises is if we introduced additional errors
 and we investigate this a little bit further by having a look on the residuals
 for the different levels.
 For sake of simplicity, we only have a look at the real parts of the residual:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename mg_0_residual_re_a_down_pre.png
	width 45text%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename mg_0_residual_re_b_down_post.png
	width 45text%

\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename mg_0_residual_re_c_up_pre.png
	width 45text%

\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Graphics
	filename mg_0_residual_re_d_up_post.png
	width 45text%

\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
In the top-most images, we see the initial residual on the highest resolution
 (left handed image) and almost no changes due to the slow convergence after
 5 iterations of a smoother (right handed image).
 The bottom images show the final solution before the smoother when going
 up in the V-cycle.
 We can observe a significantly increased residual.
 However, we also observe, that these errors are on highest frequency level
 in the y-direcction.
 Therefore, the smoother is very well capable to smoothen these errors which
 we can also observe in the RMS on the residual.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
RMS(\vec{r}): & = & (\\
 &  & 26.6214562097,\\
 &  & 13.6330649362,\\
 &  & 6.99302471987,\\
 &  & 3.5936328835,\\
 &  & 1.85204602813,\\
 &  & 0.960897131341,\\
 &  & 0.50843491166,\\
 &  & 0.285036112292,\\
 &  & 0.182744179855,\\
 &  & 0.141439886731,\\
 &  & ...)
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Standard
Despite an increased RMS in particular directly after the prolongation,
 we observe a very fast reduction of the RMS on the residual for the first
 iterations.
 However, after solving the highest frequencies, the solver still suffers
 of the slow convergence, hence requiring hundreds of iterations on the
 finest level.
\end_layout

\begin_layout Subsection
Preconditioning
\end_layout

\begin_layout Standard
A preconditioning could be used, but this is out of scope of this work.
\end_layout

\begin_layout Section
CG Solver
\end_layout

\begin_layout Standard
Since the iterations suffer of an 
\begin_inset Quotes eld
\end_inset

ill-shaped
\begin_inset Quotes erd
\end_inset

 search space, we evaluate the CG solver of its capability as a direct solver.
 Indeed, the CG solver only requires 6 iterations to reach the required
 error threshold for a resolution of 
\begin_inset Formula $64\text{²}$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
RMS(\vec{r}): & = & (\\
 &  & 11.6189500386,\\
 &  & 11.2320906244,\\
 &  & 0.48122988154,\\
 &  & 0.0654784348507,\\
 &  & 0.0134941513061,\\
 &  & 0.0019819200956,\\
 &  & 4.15862237148e-07,\\
 &  & 6.9959286287e-08\\
 &  & )
\end{eqnarray*}

\end_inset


\end_layout

\begin_layout Section
Sensitivity on 
\begin_inset Formula $\tau$
\end_inset


\end_layout

\begin_layout Standard
We like to discuss the solver for a given matrix 
\begin_inset Formula $A$
\end_inset

 with respect to the time step size 
\begin_inset Formula $\tau$
\end_inset

 in REXI.
 The range of values for 
\begin_inset Formula $\kappa$
\end_inset

 increases with larger time step sizes.
 Therefore, also the diagonal dominance increases.
 However, this also means that there are very large values on the diagonal
 with several orders of magnitude larger than the off-diagonal values.
 This can lead to cancellation effects.
\end_layout

\end_body
\end_document
